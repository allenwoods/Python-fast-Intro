#+TITLE:（每天）2小时上手Python： Python的环境配置、常用工具和基本语法
#+AUTHOR: Allen Woods

* 开始前的准备（阅读时间：10分钟）
** 搜索工具
#+BEGIN_QUOTE
I've always been there...
#+END_QUOTE
好的搜索引擎是一切工作的基础，对于绝大多数的问题，网上早就有了现成的答案。翻墙使用Google，熟练地在[[http://stackoverflow.com/][StackOverflow]] 等网站上查找解决方案是提高效率的不二法门. 如果你还不会翻墙, 请咨询身边的宅男朋友. 翻墙工具, 我推荐使用Lantern(免费)或者shadowsocks(一般需要付费).

此外，互联网上的英文资源比中文要丰富许多，熟练使用英文关键字搜索也是一项必备技能。
** Python
[[https://www.python.org/][Python]] 是一种简单易学的编程语言, 广泛流行, 功能强大. 官网上有安装包可以下载, 不过只有一个Python.exe没啥用处，配合[[www.numpy.org][Numpy]],[[pandas.pydata.org][pandas]], [[http://matplotlib.org/][matplotlib]] 等一大波库才能发挥真正的威力。Windows下Python库的依赖问题不太好解决，建议直接安装[[https://www.continuum.io/downloads][Anaconda]], 这是Python的一个distribution，预置了大部分常用的库，一站式解决环境问题。
** IDE
IDE是集成开发环境（Integrated Development Environment）的缩写，实际上就是一个用于编程的程序，它提供了开发需要的一系列工具，我们会用到的主要有Python交互式环境，自动补全功能，重构功能和项目管理功能。

个人推荐的IDE是[[https://www.jetbrains.com/pycharm/][Pycharm]], 功能完善使用方便，界面还美观。

可能会有人推荐你使用文本编辑器甚至是直接用Python Console编程。我个人觉得这种方法不太好：使用文本编辑器需要做些配置，如果不习惯命令行的操作模式会很痛苦；直接使用Python Console没法做什么真正有用的事情。而且这些功能在IDE都集成了，如果你不是很想折腾，还是乖乖用IDE吧。

** 练习（完成时间：15分钟，不包含下载时间）
1. 使用Google搜索Anaconda，Pycharm并下载安装
2. 搜索如何将Anaconda集成进Pycharm（提示：搜索pycharm anaconda setup）

* Python环境配置（阅读时间：15分钟）
如果完成了上一节的练习2，你应该已经配置好了Python开发环境。可以对照下文看看有没有配置成功。开始前确保安装好Anaconda和Pycharm。
** Python解释器设置
*** 首先，打开Pycharm设置
#+CAPTION: 打开Pycharm设置
#+LABEL: fig:setup-0
[[file:images/01-setup-0.png]]
*** 选择Anaconda的安装位置
[[file:images/01-setup-1.png]]
设置好后Pycharm会自动更新设置
*** 新建项目
在[[fig:setup-0][开始界面]]中点击 =Create New project=.
[[file:images/01-setup-2.png]]
选择Pure Python项目，设置好项目路径（项目代码的存储路径）和Python解释器后就可以创建新项目了。
** 使用Pycharm
进入Pycharm后界面如下：
[[file:images/01-pycharm-0.png]]
各个区域具体的用法我们会在后面细说。
*** 使用Python Console
首先使用Python交互命令行试验一下
[[file:images/01-pycharm-1.png]]
打开Python Console

在 =In[2]:= 后输入
#+BEGIN_SRC python
  print("Hello, World!")
#+END_SRC
输出如下
[[file:images/01-helloworld.png]]

恭喜你，你写下了第一行Python代码！

* 基本语法（阅读时间：25分钟）
Python交互命令行可以方便地尝试各种用法，但完整的功能还需要编写完整的源代码来完成。我们首先新建一个源文件 =main.py=.

[[file:images/01-basic-0.png]]

内容如下：
#+BEGIN_SRC python
  if __name__ == "__main__":
    # 变量赋值
    name = input("What's your name:") # 输入用户名
    greeting = "Hello,%s"%name # 生成招呼语
    l_count = greeting.count('l') # 输出招呼中含有几个“l”
    l_percent = (l_count/len(greeting))*100 # 计算“l”占总字数的比例
    # 操作
    print(greeting) # 打印招呼语
    print("The length of the sentence is %d, there are %d 'l' in it(%.2f%%)."
          %(len(greeting),l_count,l_percent)) # 打印计算结果
#+END_SRC
将以上内容粘贴至编辑区，运行该程序。结果如下：
[[file:images/01-basic-1.png]]
** 代码格式
以#开头的语句是注释，注释是给人看的，可以是任意内容，解释器会忽略掉注释。其他每一行都是一个语句。

当语句以冒号:结尾时，缩进的语句视为代码块。在本例中，
#+BEGIN_SRC python
  if __name__ == "__main__":
#+END_SRC
后的所有内容都是代码块。

缩进有利有弊。好处是强迫你写出格式化的代码，但没有规定缩进是几个空格还是Tab。按照约定俗成的管理，应该始终坚持使用4个空格的缩进。

缩进的另一个好处是强迫你写出缩进较少的代码，你会倾向于把一段很长的代码拆分成若干函数，从而得到缩进较少的代码。

缩进的坏处就是“复制－粘贴”功能失效了，这是最坑爹的地方。当你重构代码时，粘贴过去的代码必须重新检查缩进是否正确。此外，IDE很难像格式化Java代码那样格式化Python代码。

最后，请务必注意，Python程序是 *大小写敏感* 的，如果写错了大小写，程序会报错。

** 变量和判断
*** 条件判断
代码的第一句是一个条件判断
#+BEGIN_SRC python
  if __name__ == "__main__":
#+END_SRC
=if= 是一个关键词，表示开始进行条件判断，一般会和 =else= =elif= 组合使用.

=__name__ == "__main__"= 是一个判断表达式，根据等式是否成立会返回 =True= =False= 两种值。

==称为逻辑运算符，这类运算符常见的有以下几个
| 运算符 | 含义       |
|--------+------------|
| ==     | (值)等于   |
| !=     | (值)不等于 |
| >      | (值)大于   |
| <      | (值)小于   |
| is     | (实体)相等   |
| not    | 取反     |

注意, 在程序里我们区分值和实体两个概念. 如果两个变量的值相等, ==会返回True, 但是is一般返回False, 因为这是两个不同的变量(实体).

not为取反操作符, 对于值为True的实体a(变量,表达式), not a取False. 反之亦然.

#+BEGIN_SRC python
  if __name__ == "__main__":
#+END_SRC
该语句判断当前是直接运行目标源代码，还是被其他程序引用。具体细节我们后面再说。

*** 变量
形如 =变量名 = 变量值= 格式的代码称为 *赋值表达式* 。如
#+BEGIN_SRC python
  a = 3
#+END_SRC
表示将3的值赋予a变量.

在本例中, 我们赋值了4个变量,分别是 =name=, =greeting=, =l_count=, =l_percent=.
*** 数据类型
Python中的数据可以粗略的划分为字符串和数值两种类型。本例中， =name=, =greeting= 是字符串类型， =l_count=, =l_percent= 是数值类型。

内置函数 =type= 可以查看变量具体的类型。
**** 字符串（string）
顾名思义, 字符串就是一串字符，使用双引号括起来表示。

可以对字符串进行 *格式化* 。一般的形式是
#+BEGIN_SRC python
"This is %d formated %s"%(1, "str")
#+END_SRC
其中, =%d=,  =%f=, =%s= 称为占位符，分别对应整数数值（data），浮点数值（float，就是带小数点的数值），字符串（string）。

格式化时可以指定输出长度, 如 =%.2f= 表示输出小数点后两位。

*练习：* 
1. 在Python交互命令行中使用 =type()= 查看变量类型，试试 =type(3)= 和 =type("3")= ,看看有什么区别
2. 试试用一个数值乘以一个字符串，看看输出是什么。
**** 数值 (int, float)
数值类型就是一般我们所说的数字，可以进行数学运算。Python中不需要指明数据具体的类型，根据不同的操作解释器会自动推断。 =3/2=1= 的事情再也不会发生了。

常用的数值运算符有
| 运算符 | 含义       |
|--------+------------|
| +      | 加         |
| -      | 减         |
| *      | 乘         |
| /      | 除         |
| %      | 模(取余数) |
| **     | 次方       |

*练习:* 尝试以上几种操作。

*** 练习：
在python交互式命令行中试验：
1. 定义两个变量，分别是字符串类型和数值类型
2. 用一句命令将两个变量连续打印5次
3. 对两个变量进行逻辑判断，看会有什么结果

** 封装
编程的核心在于对问题进行恰当的抽象。一般而言，所有的问题都可以抽象为 *对一系列数据进行的一组操作*. 因此, 设计程序的第一步是考虑如何对数据和操作进行定义和封装.
*** 数据封装
一般情况下, 数据表现为一系列数据的集合. Python内置的封装方法可以大致划分为以下几类:
**** 有序类型
分为 =list= (列表)和 =tuple= (元组)两类. 在交互式命令行中尝试
#+BEGIN_SRC python
  list_example = [1989, "Allen", 1.83]
  tuple_example = (1989, "Allen", 1.83)
#+END_SRC
列表和元组内的元素可以是任意类型. 每一个元素都有一个 *下标* . 试试 =list_example[0]= =tuple_example[-1]= 分别是什么.

列表和元组几乎一样, 主要的区别是元组一旦被赋值, 内部元素就不可再更改. 试试 
#+BEGIN_SRC 
list_example[1]="Jack"
tuple_example[1]="Jack"
#+END_SRC
分别会有什么结果.
**** 索引类型
有序类型中的元素可以使用下标进行指定. 在有些情况下, 我们需要使用更复杂的方式去指定元素. Python内置的 =dict= (字典)可以完成这个工作
#+BEGIN_SRC python
  dict_example = {"birth": 1989, "name": Allen, "hight": 1.83}
#+END_SRC
类似 "birth":1989 的格式称为 key-value(键值)结构. 可以指定key来获得字典中的值.

试试
#+BEGIN_SRC python
  print(dict_example["name"])
  dict_example["name"] = "Jack"
#+END_SRC
**** 无序类型
*** 操作封装
*** 对象

** 调试
To be continue...
